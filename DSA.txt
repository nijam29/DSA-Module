package com.datast;
import java.util.*;
public class Array_list{
	public static void main(String[]args) {
		ArrayList<Integer> al= new ArrayList<Integer>();
		al.add(23);
		al.add(45);
		al.add(56);
		al.add(67);
		al.remove(2);
		al.set(2, 54);
		System.out.println(al);
		System.out.println(al.size());
		for(int i=0;i<al.size();i++) {
			System.out.println(al.get(i));
		}
		System.out.println(al.contains(70));
		System.out.println(al.contains(45));
		System.out.println(al);
	}
}
.............
package com.datast;
import java.util.Arrays;
public class DoubleQ {
	///declaring variables
	int front,rear,size;
	int capacity;
	int array[];
///constructing for DoubleQ,enqueue,dequeue,front,rear
public DoubleQ(int capacity) {
	this.capacity= capacity;
	front=this.size=0;
	rear=this.capacity-1;
	array=new int [this.capacity];
}

boolean isFull(DoubleQ queue) { 
	return (queue.size==queue.capacity);
}
boolean isEmpty(DoubleQ queue) {
	return (queue.size==0);
}

void endqueue(int item) {
	if(isFull(this))
		return;
	this.rear=(this.rear+1)%this.capacity;
	this.array[this.rear]=item;
	this.size=this.size+1;
}

int dequeue() {
	if (isEmpty(this))
		return Integer.MIN_VALUE;
	int item= this.array[this.front];
	this.front=(this.front+1)%this.capacity;
	this.size=this.size-1;
	return item;
}

int front() {
	if(isEmpty(this))
		return Integer.MIN_VALUE;
	return this.array[this.front];
}

int rear() {
	if(isEmpty(this))
		return Integer.MIN_VALUE;
	return this.array[this.rear];
}

@override ///generating... toString()
public String toString() {
	return "DoubleQ [front=" + front +",rear=" + rear +", capacity=" + capacity +", array=" + Arrays.toString(array) + "]";
}

	public static void main(String[]args) {
		DoubleQ q= new DoubleQ(40);
		q.endqueue(20);
		q.endqueue(43);
		q.endqueue(54);
		q.endqueue(65);
	System.out.println(q);
	System.out.println("Front item is" + q.front());
	System.out.println(q.dequeue()+ "dequeued from queue/n");
	System.out.println("Front item is " + q.front());
	System.out.println("Front item is " + q.rear());
		
	}
}
................................
package com.datast;
import java.util.*;
public class Duplicate {
	class Node{
		int data;
		Node next;
		public Node(int data) {
			this.data=data;
			this.next=null;
		}
	}
public Node head=null;
public Node tail=null;
public void addNode(int data) {
	Node nNode= new Node(data);
	if (head==null) {
		head=nNode;
		tail=nNode;
	}
	else {
		tail.next=nNode;
		tail=nNode;
	}
}
public void removeDublicateNodes() {
	Node current=head,idex=null,temp=null;
	if (head==null) {
		return;
	}
	else {
		while(current !=null) {
			temp=current;
			Node index = current.next;
			while (index !=null){
				if(current.data==index.data) {
					Object tem;
					tem=index.next;
				}
				else {
					temp=index;
			}
				index=index.next;
		}
			current=current.next;
			    
		}
	}
}
public void print() {
	Node current=head;
	if(head==null) {
		System.out.println("list is empty");
		return;
	}
	while (current !=null) {
		System.out.println(current.data + "");
		current=current.next;
	}
	System.out.println();
}


	public static void main(String[]args) {
		LinkedList_Duplicate list= new LinkedList_Duplicate();
	    list.addNode(1);
		list.addNode(1);
		list.addNode(2);
		list.addNode(2);
		list.addNode(3);
		list.addNode(5);
		list.addNode(1);
		list.addNode(1);
		System.out.println("original LinkedList: ");
		list.print();
		list.removeDuplicateNodes();
		System.out.println("LinkedList after removing duplicates: ");
		list.print();
		}
}
...............
package com.datast;
import java.util.*;

public class Linkedlist {
	public static void main(String[]args)
	{
		LinkedList <String> players = new LinkedList <> ();
		players.add("john");
		players.add("vicky");
		players.add("gotham");
		//It will list the players name
		
		System.out.println("LinkedList: " + players);
		
		//It will get the players index : name
		
		String str= players.get(2);
		System.out.println("Element at index 2: " +str);
		System.out.println(" ");
		
		//Iterator method
		
		Iterator <String> itr = players.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
		
	}

}
...............
package com.datast;

import java.util.*;
public class List {
public static void main(String[] args)
{
	ArrayList<Integer> al= new ArrayList<Integer> ();
	
	al.add(20);
	al.add(47);
	al.add(67);
	al.add(65);
//display an elements and size	
	System.out.println(al);
	System.out.println(al.size());
//insert the element into the list in specified location
	al.add(1,77);
	System.out.println(al);
	System.out.println(al.size());
//modifying the element
	al.remove(new Integer(65));
	System.out.println(al);
	System.out.println(al.size());
//removing the element by specifying it's index position
	al.remove(3);
	System.out.println(al);
	System.out.println(al.size());
//listing the element by using for loop
	for (int i=0; i<al.size(); i++) {
		System.out.println(al.get(i));
	}
//listing the element by using forEach loop(auto unboxing)
	for (int v:al) {
		System.out.println(v);
	}
//searching the element
	System.out.println(al.contains(77));
	System.out.println(al.contains(47));
	System.out.println(al.contains(45));
//copying the array list into another list
	ArrayList <Integer> al1= new ArrayList <Integer> (al);
	System.out.println(al1);
}

}
................
package com.datast;
import java.util.*;
public class Model_q {
	static class stack{
		Queue<Integer> q1= new LinkedList<>();
		Queue<Integer> q2= new LinkedList<>();
		
		void remove()
		{
			if (q1.isEmpty())
				return;
			while (q1.size()!=1) {
				q2.add(q1.peek());
				q1.remove();
			}
			q1.remove();
			Queue<Integer>q=q1;
					q1=q2;
					q2=q;
			
				}
		void add(int x) 
		   {
			q1.add(x);
			}
		
		int top()
		{
			if (q1.isEmpty())
				return-1;
			while(q1.size()!=1) {
				q2.add(q1.peek());
				q1.remove();
			}
			int temp= q1.peek();
			q1.remove();
			q2.add(temp);
			Queue<Integer>q=q1;
			q1=q2;
			q2=q;
			return temp;
		}
		int size() {
			return q1.size();
			}
		public static void main(String[]args)
		{
			Stack s=new Stack();
			s.add(1);
			s.add(2);
			s.add(3);
			System.out.println(s);
			System.out.println("Current size: " + s.size());
			System.out.println(s.pop());
			s.remove(null);
			System.out.println(" ");
			System.out.println(s.pop());
			s.remove(null);
			System.out.println(" ");
			System.out.println(s.pop());
			System.out.println("Current size: " + s.size());
			
		}
	}

}
...............
